import argparse
import os

parser = argparse.ArgumentParser(description='Run test')
parser.add_argument('--exp_folders', required=True, type=str,
                        help='paths to the folders with best_model.cpt file and output.out file (generated by logger during training), separated with ,')
# e. g. --exp_folders logs/run/vm_js_dif_input/train.py-parallel-03-18-15:36:33-dajty,logs/run/fn_js_dif_input/train.py-parallel-03-16-18:37:58-uvflw
parser.add_argument('--eval_part', type=str, default="test", required=False, help='which partition to evaluate on. Options: test, val')
parser.add_argument('--test', action='store_true',
                        help='what to do with generated commands: print (to check commands) or os.system (to run comands)')
args = parser.parse_args()

assert args.eval_part in {"test", "val"}, "Eval_part should be either test or val"

if args.test:
    action = print
else:
    action = os.system

run_command = "python " # if you need to specify anything, e. g. set CUDA_VISIBLE_DEVCES or use sbatch/bsub, do it here

for exp_folder in args.exp_folders.split(","):
    with open(os.path.join(exp_folder, "output.out")) as fin:
        train_command = fin.read().split("\n")[0] # the first line of output.out generated by logger stores the training command
        # replace test/val files if needed
        if args.eval_part=="test" and "val.txt" in train_command:
            train_command = train_command.replace("val.txt", "test.txt")
        if args.eval_part=="val" and "test.txt" in train_command:
            train_command = train_command.replace("test.txt", "val.txt")
        command = train_command + " --only_test True --model_file "+os.path.join(exp_folder, "best_model.cpt")
        action(run_command+command)